name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: test_db
      DB_USERNAME: root
      DB_PASSWORD: root

    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v3

      - name: PHP セットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2

      - name: Composer install
        run: composer install --no-progress --no-suggest --optimize-autoloader

      - name: Create .env.testing for PHPUnit
        run: |
          cat <<EOF > .env.testing
          APP_ENV=testing
          APP_KEY=base64:0000000000000000000000000000000000000000000=
          APP_DEBUG=true
          APP_URL=http://localhost
          SLACK_WEBHOOK_URL=https://hooks.slack.com/services/TEST/FAKE/WEBHOOK

          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=test_db
          DB_USERNAME=root
          DB_PASSWORD=root

          EOF

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Create test database
        run: mysql -h127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS test_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --configuration phpunit.xml

      - name: Node.js セットアップ（フロントビルド用）
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: npm install & build
        run: |
          npm ci
          npm run build

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v3

      - name: デプロイ用 SSH キー設定
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Generate .env on CI
        run: |
          cat <<EOF > .env
          APP_NAME="TODO Reminder App"
          APP_ENV=${{ secrets.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}

          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}

          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=warning

          DB_CONNECTION=mysql
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=3306
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}

          MAIL_MAILER=smtp
          MAIL_HOST=mailpit
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="TODO Reminder App"
          EOF

      - name: Deploy to VPS via rsync
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          rsync -az --delete \
            ./ $VPS_USER@$VPS_HOST:/var/www/todo-reminder-app

      - name: リモートでキャッシュクリア等
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh $VPS_USER@$VPS_HOST "
            cd /var/www/todo-reminder-app &&
            composer install --no-interaction --optimize-autoloader &&
            php artisan migrate --force &&
            php artisan config:cache &&
            php artisan route:cache
          "
